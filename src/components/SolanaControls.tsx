
import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { toast } from "sonner";
import { initializeSolanaConnection, getKeypairFromPrivateKey, getSolanaBalance } from '@/services/solanaConnectionService';
import { snipeToken, monitorNewTokens } from '@/services/solanaBotService';

interface SolanaControlsProps {
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã
}

const SolanaControls: React.FC<SolanaControlsProps> = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ —Å–µ—Ç–∏
  const [privateKey, setPrivateKey] = useState<string>("");
  const [network, setNetwork] = useState<string>("devnet");
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const [balance, setBalance] = useState<number | null>(null);
  const [walletAddress, setWalletAddress] = useState<string | null>(null);
  const [isMonitoring, setIsMonitoring] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏ Solana
  const handleConnect = async () => {
    try {
      setIsLoading(true);
      
      if (!privateKey.trim()) {
        toast.error("üîë –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á!");
        return;
      }

      const trimmedKey = privateKey.trim();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const connection = initializeSolanaConnection(network);
      
      // –ü–æ–ª—É—á–∞–µ–º keypair –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
      const keypair = await getKeypairFromPrivateKey(trimmedKey);
      if (!keypair) {
        toast.error("üîë –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å keypair –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞!");
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
      const walletAddr = keypair.publicKey.toString();
      setWalletAddress(walletAddr);
      
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
      try {
        const userBalance = await getSolanaBalance(connection, keypair.publicKey);
        setBalance(userBalance);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", err);
        setBalance(0);
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setIsConnected(true);
      
      toast.success(`üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${network}!`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –∏ —Å–µ—Ç—å –≤ local storage
      localStorage.setItem('privateKey', trimmedKey);
      localStorage.setItem('network', network);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error);
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  const handleDisconnect = () => {
    setIsConnected(false);
    setBalance(null);
    setWalletAddress(null);
    if (isMonitoring) {
      handleStopMonitoring();
    }
    toast.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ç–∏ Solana");
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  const handleRefreshBalance = async () => {
    if (!isConnected || !walletAddress) return;
    
    try {
      setIsLoading(true);
      const connection = initializeSolanaConnection(network);
      const keypair = await getKeypairFromPrivateKey(privateKey);
      if (!keypair) {
        toast.error("üîë –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å keypair –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞!");
        return;
      }
      
      const userBalance = await getSolanaBalance(connection, keypair.publicKey);
      setBalance(userBalance);
      
      toast.success("üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
  const handleStartMonitoring = async () => {
    if (!isConnected) {
      toast.error("üîå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ç–∏ Solana!");
      return;
    }
    
    try {
      setIsMonitoring(true);
      const connection = initializeSolanaConnection(network);
      const keypair = await getKeypairFromPrivateKey(privateKey);
      
      if (!keypair) {
        toast.error("üîë –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å keypair –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞!");
        return;
      }
      
      toast.success("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω!");
      
      // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤
      monitorNewTokens(connection, keypair, {
        minVolume: 5000,
        minHolders: 2,
        maxAge: 0.017, // 1 –º–∏–Ω—É—Ç–∞ –≤ —á–∞—Å–∞—Ö
        minPumpScore: 70,
        slippage: 5.0,
        snipeAmount: 0.1,
        usePumpFun: true
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", error);
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setIsMonitoring(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  const handleStopMonitoring = () => {
    setIsMonitoring(false);
    // –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    toast.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const savedPrivateKey = localStorage.getItem('privateKey');
    const savedNetwork = localStorage.getItem('network');
    
    if (savedPrivateKey) {
      setPrivateKey(savedPrivateKey);
    }
    
    if (savedNetwork) {
      setNetwork(savedNetwork);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (savedPrivateKey && savedNetwork) {
      // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ
      // handleConnect();
    }
  }, []);

  return (
    <div className="w-full md:w-64 md:fixed md:h-full p-4 bg-gray-100 dark:bg-gray-900 border-r">
      <div className="space-y-4">
        <div className="text-xl font-bold">üöÄ Solana Sniper Bot</div>
        
        <Card>
          <CardHeader>
            <CardTitle>üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</CardTitle>
            <CardDescription>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ Solana</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="private-key">–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á</Label>
              <Input 
                id="private-key"
                type="password" 
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á" 
                value={privateKey}
                onChange={(e) => setPrivateKey(e.target.value)}
                disabled={isConnected || isLoading}
              />
            </div>
            
            <div>
              <Label htmlFor="network">–°–µ—Ç—å</Label>
              <Select 
                value={network} 
                onValueChange={setNetwork}
                disabled={isConnected || isLoading}
              >
                <SelectTrigger id="network">
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="mainnet">Mainnet</SelectItem>
                  <SelectItem value="devnet">Devnet</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            {!isConnected ? (
              <Button 
                onClick={handleConnect} 
                disabled={isLoading}
                className="w-full"
              >
                {isLoading ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'}
              </Button>
            ) : (
              <Button 
                onClick={handleDisconnect} 
                variant="outline"
                className="w-full"
              >
                –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
              </Button>
            )}
          </CardContent>
        </Card>
        
        {isConnected && (
          <>
            <Card>
              <CardHeader>
                <CardTitle>üí∞ –ë–∞–ª–∞–Ω—Å</CardTitle>
                <CardDescription>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ</CardDescription>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="text-sm">
                  <span className="font-medium">–ê–¥—Ä–µ—Å: </span>
                  <span className="text-gray-500 break-all">
                    {walletAddress ? `${walletAddress.slice(0, 4)}...${walletAddress.slice(-4)}` : '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}
                  </span>
                </div>
                
                <div className="flex items-center justify-between">
                  <div>
                    <span className="font-medium">–ë–∞–ª–∞–Ω—Å: </span>
                    <span className="text-green-500 font-bold">
                      {balance !== null ? `${balance.toFixed(6)} SOL` : '–ó–∞–≥—Ä—É–∑–∫–∞...'}
                    </span>
                  </div>
                  <Button 
                    variant="ghost" 
                    size="sm"
                    onClick={handleRefreshBalance}
                    disabled={isLoading}
                  >
                    üîÑ
                  </Button>
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader>
                <CardTitle>üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</CardTitle>
                <CardDescription>–ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤</CardDescription>
              </CardHeader>
              <CardContent>
                {!isMonitoring ? (
                  <Button 
                    onClick={handleStartMonitoring} 
                    className="w-full"
                    disabled={!isConnected || isLoading}
                  >
                    –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                  </Button>
                ) : (
                  <Button 
                    onClick={handleStopMonitoring} 
                    variant="destructive"
                    className="w-full"
                  >
                    –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                  </Button>
                )}
              </CardContent>
            </Card>
          </>
        )}
      </div>
    </div>
  );
};

export default SolanaControls;
