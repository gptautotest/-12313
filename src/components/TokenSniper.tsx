
import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Input } from './ui/input';
import { Button } from './ui/button';
import { Label } from './ui/label';
import { Slider } from './ui/slider';
import { Switch } from './ui/switch';
import { Separator } from './ui/separator';
import { toast } from './ui/use-toast';
import { formatSol } from '@/lib/utils';
import { snipeToken } from '@/services/solanaBotService';

export function TokenSniper() {
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–Ω–∞–π–ø–∏–Ω–≥–∞
  const [snipeAmount, setSnipeAmount] = useState<number>(0.1);
  const [slippage, setSlippage] = useState<number>(5.0);
  const [minVolume, setMinVolume] = useState<number>(5000);
  const [minHolders, setMinHolders] = useState<number>(2);
  const [maxAge, setMaxAge] = useState<number>(1); // –≤ –º–∏–Ω—É—Ç–∞—Ö
  const [minPumpScore, setMinPumpScore] = useState<number>(70);
  const [usePumpFun, setUsePumpFun] = useState<boolean>(true);
  const [useRaydium, setUseRaydium] = useState<boolean>(true);
  const [botActive, setBotActive] = useState<boolean>(false);
  const [tokenAddress, setTokenAddress] = useState<string>('');
  const [isSniping, setIsSniping] = useState<boolean>(false);
  
  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
  useEffect(() => {
    let interval: NodeJS.Timeout | null = null;
    
    if (botActive) {
      toast({
        title: "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        description: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω",
      });
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–æ–≤
      // ...
    } else if (interval) {
      clearInterval(interval);
      toast({
        title: "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        description: "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
      });
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [botActive]);
  
  // –§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ —Å–Ω–∞–π–ø–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞
  const handleManualSnipe = async () => {
    if (!tokenAddress) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞",
        variant: "destructive"
      });
      return;
    }
    
    setIsSniping(true);
    try {
      const success = await snipeToken(tokenAddress, snipeAmount, slippage);
      if (success) {
        toast({
          title: "–£—Å–ø–µ—à–Ω–æ",
          description: `–¢–æ–∫–µ–Ω ${tokenAddress.slice(0, 6)}...${tokenAddress.slice(-4)} —Å–Ω–∞–π–ø–Ω—É—Ç –Ω–∞ ${snipeAmount} SOL`,
        });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω–∞–π–ø–Ω—É—Ç—å —Ç–æ–∫–µ–Ω",
          variant: "destructive"
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω–∞–π–ø–∏–Ω–≥–µ:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω–∞–π–ø–Ω—É—Ç—å —Ç–æ–∫–µ–Ω",
        variant: "destructive"
      });
    } finally {
      setIsSniping(false);
    }
  };
  
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>–°–Ω–∞–π–ø–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ Solana</CardTitle>
        <CardDescription>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–Ω–∞–π–ø–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="space-y-2">
            <div className="flex justify-between">
              <Label htmlFor="snipe-amount">–°—É–º–º–∞ –¥–ª—è —Å–Ω–∞–π–ø–∏–Ω–≥–∞</Label>
              <span className="text-sm text-muted-foreground">{formatSol(snipeAmount)}</span>
            </div>
            <Slider 
              id="snipe-amount"
              min={0.01} 
              max={1} 
              step={0.01} 
              value={[snipeAmount]} 
              onValueChange={(value) => setSnipeAmount(value[0])} 
            />
          </div>
          
          <div className="space-y-2">
            <div className="flex justify-between">
              <Label htmlFor="slippage">–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ (%)</Label>
              <span className="text-sm text-muted-foreground">{slippage}%</span>
            </div>
            <Slider 
              id="slippage"
              min={1} 
              max={50} 
              step={1} 
              value={[slippage]} 
              onValueChange={(value) => setSlippage(value[0])} 
            />
          </div>
          
          <Separator />
          
          <div className="space-y-2">
            <div className="flex justify-between">
              <Label htmlFor="min-volume">–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º ($)</Label>
              <span className="text-sm text-muted-foreground">${minVolume}</span>
            </div>
            <Slider 
              id="min-volume"
              min={1000} 
              max={50000} 
              step={1000} 
              value={[minVolume]} 
              onValueChange={(value) => setMinVolume(value[0])} 
            />
          </div>
          
          <div className="space-y-2">
            <div className="flex justify-between">
              <Label htmlFor="min-holders">–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Ö–æ–ª–¥–µ—Ä–æ–≤</Label>
              <span className="text-sm text-muted-foreground">{minHolders}</span>
            </div>
            <Slider 
              id="min-holders"
              min={1} 
              max={50} 
              step={1} 
              value={[minHolders]} 
              onValueChange={(value) => setMinHolders(value[0])} 
            />
          </div>
          
          <div className="space-y-2">
            <div className="flex justify-between">
              <Label htmlFor="max-age">–ú–∞–∫—Å. –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞ (–º–∏–Ω)</Label>
              <span className="text-sm text-muted-foreground">{maxAge} –º–∏–Ω</span>
            </div>
            <Slider 
              id="max-age"
              min={0.5} 
              max={60} 
              step={0.5} 
              value={[maxAge]} 
              onValueChange={(value) => setMaxAge(value[0])} 
            />
          </div>
          
          <div className="space-y-2">
            <div className="flex justify-between">
              <Label htmlFor="min-pump-score">–ú–∏–Ω. Pump Score</Label>
              <span className="text-sm text-muted-foreground">{minPumpScore}</span>
            </div>
            <Slider 
              id="min-pump-score"
              min={10} 
              max={100} 
              step={5} 
              value={[minPumpScore]} 
              onValueChange={(value) => setMinPumpScore(value[0])} 
            />
          </div>
          
          <Separator />
          
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label htmlFor="pump-fun">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Pump.fun</Label>
              <p className="text-sm text-muted-foreground">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Pump.fun</p>
            </div>
            <Switch 
              id="pump-fun"
              checked={usePumpFun} 
              onCheckedChange={setUsePumpFun} 
            />
          </div>
          
          <div className="flex items-center justify-between">
            <div className="space-y-0.5">
              <Label htmlFor="raydium">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Raydium</Label>
              <p className="text-sm text-muted-foreground">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Raydium</p>
            </div>
            <Switch 
              id="raydium"
              checked={useRaydium} 
              onCheckedChange={setUseRaydium} 
            />
          </div>
          
          <Separator />
          
          <div className="space-y-2">
            <Label htmlFor="token-address">–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–Ω–∞–π–ø–∏–Ω–≥–∞)</Label>
            <div className="flex space-x-2">
              <Input 
                id="token-address"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ Solana" 
                value={tokenAddress}
                onChange={(e) => setTokenAddress(e.target.value)}
              />
              <Button 
                onClick={handleManualSnipe} 
                disabled={isSniping || !tokenAddress}
                className="whitespace-nowrap"
              >
                {isSniping ? "–°–Ω–∞–π–ø–∏–Ω–≥..." : "–°–Ω–∞–π–ø–Ω—É—Ç—å"}
              </Button>
            </div>
          </div>
          
          <Button 
            variant={botActive ? "destructive" : "default"}
            className="w-full mt-4"
            onClick={() => setBotActive(!botActive)}
          >
            {botActive ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞" : "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
import React from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { Badge } from "@/components/ui/badge";

export default function TokenSniper() {
  return (
    <Card className="w-full max-w-4xl mx-auto bg-gradient-to-br from-solana-secondary/10 to-solana/5 border-solana/20">
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="text-2xl font-bold">üéØ Sniper Bot 3000</CardTitle>
            <CardDescription>–û—Ç–ª–∞–≤–ª–∏–≤–∞–π –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö</CardDescription>
          </div>
          <Badge variant="success" className="bg-green-500">–ê–ö–¢–ò–í–ï–ù</Badge>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="text-sm font-medium">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å</label>
            <div className="flex items-center gap-2">
              <Slider defaultValue={[50]} max={100} step={1} className="flex-1" />
              <span className="text-xs opacity-70">50 SOL</span>
            </div>
          </div>
          <div>
            <label className="text-sm font-medium">–ú–∞–∫—Å. % —Ç–æ–ø-—Ö–æ–ª–¥–µ—Ä–æ–≤</label>
            <div className="flex items-center gap-2">
              <Slider defaultValue={[20]} max={100} step={1} className="flex-1" />
              <span className="text-xs opacity-70">20%</span>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="text-sm font-medium">–ë—é–¥–∂–µ—Ç –Ω–∞ —Å–Ω–∞–π–ø (SOL)</label>
            <Input type="number" placeholder="0.1" defaultValue="0.1" />
          </div>
          <div>
            <label className="text-sm font-medium">–¢–∞–π–º–∞—É—Ç (—Å–µ–∫)</label>
            <Input type="number" placeholder="60" defaultValue="60" />
          </div>
        </div>

        <div className="p-3 bg-black/20 rounded-lg">
          <h3 className="text-sm font-semibold mb-2">DEX –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</h3>
          <div className="flex flex-wrap gap-2">
            <Badge variant="outline" className="border-solana bg-black/20">Raydium ‚úì</Badge>
            <Badge variant="outline" className="border-solana bg-black/20">Pump.fun ‚úì</Badge>
            <Badge variant="outline" className="border-solana/50 bg-black/10 opacity-50">Orca</Badge>
            <Badge variant="outline" className="border-solana/50 bg-black/10 opacity-50">Jupiter</Badge>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex flex-col sm:flex-row gap-2 justify-between">
        <Button className="w-full sm:w-auto bg-solana hover:bg-solana-secondary">üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –°–ù–ê–ô–ü–ï–†</Button>
        <Button variant="outline" className="w-full sm:w-auto border-solana/30 text-solana hover:bg-solana/10">‚öôÔ∏è –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò</Button>
      </CardFooter>
    </Card>
  );
}
