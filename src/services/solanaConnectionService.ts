
import { Connection, PublicKey, Keypair, LAMPORTS_PER_SOL, clusterApiUrl } from '@solana/web3.js';
import * as bs58 from 'bs58';
import { Buffer } from 'buffer';

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ Solana.
 * @param network - –°–µ—Ç—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ('mainnet', 'devnet')
 * @returns –û–±—ä–µ–∫—Ç Connection
 */
export const initializeSolanaConnection = (network: string): Connection => {
  const endpoint = network === 'mainnet' 
    ? clusterApiUrl('mainnet-beta') 
    : clusterApiUrl('devnet');
  
  console.log(`üöÄ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ç–∏ Solana (${network}): ${endpoint}`);

  try {
    return new Connection(endpoint, 'confirmed');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Solana:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
};

/**
 * –°–æ–∑–¥–∞–µ—Ç Keypair –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞.
 * @param privateKeyStr - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base58 –∏–ª–∏ –º–∞—Å—Å–∏–≤–∞ –±–∞–π—Ç–æ–≤
 * @returns Keypair –∏–ª–∏ null, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
 */
export const getKeypairFromPrivateKey = async (privateKeyStr: string): Promise<Keypair | null> => {
  try {
    let privateKeyBytes;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –º–∞—Å—Å–∏–≤–æ–º –±–∞–π—Ç–æ–≤ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    if (privateKeyStr.startsWith('[') && privateKeyStr.endsWith(']')) {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –º–∞—Å—Å–∏–≤
        privateKeyBytes = JSON.parse(privateKeyStr);
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫–∞–∫ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç–æ–≤");
      } catch (parseError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞—Å—Å–∏–≤–∞ –±–∞–π—Ç–æ–≤:", parseError);
        return null;
      }
    } else {
      // –ò–Ω–∞—á–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ base58 —Å—Ç—Ä–æ–∫–∞
      try {
        privateKeyBytes = bs58.decode(privateKeyStr);
        console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Base58");
      } catch (decodeError) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ Base58:", decodeError);
        return null;
      }
    }

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if (!Array.isArray(privateKeyBytes) && !(privateKeyBytes instanceof Uint8Array)) {
      console.error("‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –±–∞–π—Ç–æ–≤ –∏–ª–∏ Uint8Array");
      return null;
    }

    // –°–æ–∑–¥–∞–µ–º keypair –∏–∑ –±–∞–π—Ç–æ–≤
    const keypair = Keypair.fromSecretKey(
      Buffer.from(privateKeyBytes)
    );

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω Keypair —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º: ${keypair.publicKey.toString()}`);
    return keypair;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Keypair:", error);
    return null;
  }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ Solana.
 * @param connection - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏ Solana
 * @param publicKey - –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∞–∫–∫–∞—É–Ω—Ç–∞
 * @returns –ë–∞–ª–∞–Ω—Å –≤ SOL
 */
export const getSolanaBalance = async (connection: Connection, publicKey: PublicKey): Promise<number> => {
  try {
    console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–¥—Ä–µ—Å–∞: ${publicKey.toString()}`);
    const balance = await connection.getBalance(publicKey);
    const solBalance = balance / LAMPORTS_PER_SOL;
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${solBalance} SOL`);
    return solBalance;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ Solana:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
  }
};
