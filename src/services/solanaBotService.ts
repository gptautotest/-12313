import { Connection, Keypair, PublicKey, LAMPORTS_PER_SOL, SystemProgram, Transaction } from '@solana/web3.js';
import { create } from 'zustand';
import { DEVNET_RPC, DEFAULT_KEY } from '@/lib/constants';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
interface BotState {
  balance: number;
  isRunning: boolean;
  network: string;
  privateKey: string;
  publicKey: string;
  snipeAmount: number;
  maxGas: number;
  swapTime: number;
  logs: string[];
  setPrivateKey: (key: string) => void;
  setSnipeAmount: (amount: number) => void;
  setMaxGas: (gas: number) => void;
  setSwapTime: (time: number) => void;
  addLog: (log: string) => void;
}

// –°–æ–∑–¥–∞–µ–º Zustand store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞
export const useBotStore = create<BotState>((set) => ({
  balance: 0,
  isRunning: false,
  network: 'devnet',
  privateKey: '',
  publicKey: '',
  snipeAmount: 0.1,
  maxGas: 0.005,
  swapTime: 10,
  logs: [],
  setPrivateKey: (key) => set({ privateKey: key }),
  setSnipeAmount: (amount) => set({ snipeAmount: amount }),
  setMaxGas: (gas) => set({ maxGas: gas }),
  setSwapTime: (time) => set({ swapTime: time }),
  addLog: (log) => set((state) => ({
    logs: [log, ...state.logs].slice(0, 50),
    balance: state.balance // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–∞
  }))
}));


//This file needs to be created or adjusted to match your existing structure.
// src/services/solanaConnectionService.ts
// import { Connection, Keypair } from '@solana/web3.js';
// import { DEVNET_RPC } from '@/lib/constants';

// export const getConnection = () => {
//   return new Connection(DEVNET_RPC, 'confirmed');
// };

// export const getKeypairFromPrivateKey = (privateKey: string): Keypair | null => {
//   try {
//     const privateKeyBytes = parsePrivateKey(privateKey);
//     if (!privateKeyBytes) return null;
//     return Keypair.fromSecretKey(Uint8Array.from(privateKeyBytes));
//   } catch (error) {
//     console.error('Error creating Keypair from private key:', error);
//     return null;
//   }
// };


//  This function is likely redundant now.

// –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (This function might need adjustments to be compatible with getKeypairFromPrivateKey)
const parsePrivateKey = (key: string): number[] | null => {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  const cleanKey = key.replace(/\s+/g, '');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª [123,456,...]
  if (cleanKey.startsWith('[') && cleanKey.endsWith(']')) {
    try {
      return JSON.parse(cleanKey);
    } catch {
      // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      try {
        // –£–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–∞–º–∏
        return cleanKey.slice(1, -1).split(',').map(num => parseInt(num.trim(), 10));
      } catch {
        return null;
      }
    }
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  if (cleanKey.includes(',')) {
    try {
      return cleanKey.split(',').map(num => parseInt(num.trim(), 10));
    } catch {
      return null;
    }
  }

  // –ï—Å–ª–∏ —ç—Ç–æ base58 –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
  try {
    const decoded = Uint8Array.from(Buffer.from(cleanKey, 'base64'));
    return Array.from(decoded);
  } catch {
    return null;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
import { getConnection, getKeypairFromPrivateKey } from './solanaConnectionService';
export const updateBalance = async (privateKey?: string): Promise<number> => {
  console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...");

  if (!privateKey) {
    console.log("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    useBotStore.setState({ balance: 0, publicKey: '' });
    return 0;
  }

  console.log("Updating balance with private key:", privateKey ? "Present" : "Not present");

  try {
    const keypair = getKeypairFromPrivateKey(privateKey);
    if (!keypair) {
      console.error('–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å keypair –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞');
      return 0;
    }

    const connection = getConnection();
    const lamports = await connection.getBalance(keypair.publicKey);
    const publicKey = keypair.publicKey.toString();

    console.log("Wallet public key:", publicKey);
    console.log("Raw balance:", lamports);

    useBotStore.setState({
      balance: lamports / LAMPORTS_PER_SOL,
      publicKey
    });

    console.log("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:", lamports / LAMPORTS_PER_SOL, "SOL");
    return lamports / LAMPORTS_PER_SOL;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    useBotStore.setState({ balance: 0 });
    return 0;
  }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const formatBalance = (balance: number): string => {
  return balance.toFixed(4);
};


// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö
export const formatRubDisplay = (balance: number): string => {
  const rate = 7000; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å SOL –∫ —Ä—É–±–ª—é
  return (balance * rate).toFixed(0) + ' ‚ÇΩ';
};

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
let runningInterval;
export const startCopyBot = async () => {
  if (useBotStore.getState().isRunning) {
    return;
  }

  useBotStore.setState({ isRunning: true });

  const { privateKey } = useBotStore.getState();
  if (!privateKey) {
    useBotStore.setState({ isRunning: false });
    useBotStore.getState().addLog('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á');
    return;
  }

  useBotStore.getState().addLog('üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–Ω–∞–π–ø–∏–Ω–≥
  runningInterval = setInterval(async () => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const { snipeAmount, maxGas, network } = useBotStore.getState();

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–Ω–∞–π–ø–∏–Ω–≥–∞
      const randomTokenAddress = Keypair.generate().publicKey.toString();
      const connection = getConnection();

      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—É–º–º—ã —Å–Ω–∞–π–ø–∏–Ω–≥–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
      const actualAmount = (Math.random() * 0.8 + 0.2) * snipeAmount;
      const gasUsed = (Math.random() * 0.8) * maxGas;

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª–æ–≥–∏
      useBotStore.getState().addLog(`üîç –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: ${randomTokenAddress.substring(0, 10)}...`);
      useBotStore.getState().addLog(`üí∞ –°–Ω–∞–π–ø–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É ${actualAmount.toFixed(4)} SOL`);

      // –ò–º–∏—Ç–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const transaction = new Transaction();

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ä–µ–¥—Å—Ç–≤ —Å–∞–º–æ–º—É —Å–µ–±–µ (–∏–º–∏—Ç–∞—Ü–∏—è —Å–Ω–∞–π–ø–∏–Ω–≥–∞)
      transaction.add(
        SystemProgram.transfer({
          fromPubkey: getKeypairFromPrivateKey(privateKey)?.publicKey,
          toPubkey: getKeypairFromPrivateKey(privateKey)?.publicKey,
          lamports: 1000 // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
        })
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      try {
        const signature = await connection.sendTransaction(transaction, [getKeypairFromPrivateKey(privateKey)!]);
        useBotStore.getState().addLog(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${signature.substring(0, 10)}...`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await updateBalance(privateKey);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
        useBotStore.getState().addLog(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —Å–Ω–∞–π–ø–∏–Ω–≥–µ:", error);
      useBotStore.getState().addLog(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }, 10000); // –°–Ω–∞–π–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
export const stopCopyBot = () => {
  clearInterval(runningInterval);
  useBotStore.setState({ isRunning: false });
  useBotStore.getState().addLog('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  console.log('WebSocket closed');
};

// –≠–º—É–ª—è—Ü–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
const simulateTokenDiscovery = () => {
  const checkForNewTokens = () => {
    if (!useBotStore.getState().isRunning) return;

    // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30% —ç–º—É–ª–∏—Ä—É–µ–º –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if (Math.random() < 0.3) {
      const tokenAddress = generateRandomTokenAddress();
      const tokenSymbol = generateRandomTokenSymbol();
      const logMessage = `–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: ${tokenSymbol} (${tokenAddress.substring(0, 8)}...)`;
      useBotStore.getState().addLog(logMessage);

      // –≠–º—É–ª–∏—Ä—É–µ–º —Å–Ω–∞–π–ø–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞
      setTimeout(() => {
        snipeToken(tokenAddress, tokenSymbol);
      }, 500);
    }

    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
    if (useBotStore.getState().isRunning) {
      setTimeout(checkForNewTokens, 3000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    }
  };

  checkForNewTokens();
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏
const generateRandomTokenAddress = () => {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  let result = '';
  for (let i = 0; i < 44; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Ç–æ–∫–µ–Ω–∞
const generateRandomTokenSymbol = () => {
  const symbols = ['SOL', 'BONK', 'PYTH', 'JUP', 'RAY', 'MANGO', 'SAMO', 'DUST', 'RENDER', 'APT', 'USDC'];
  return symbols[Math.floor(Math.random() * symbols.length)] + Math.floor(Math.random() * 100);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω–∞–π–ø–∏–Ω–≥–∞ —Ç–æ–∫–µ–Ω–∞
const snipeToken = async (tokenAddress: string, tokenSymbol: string) => {
  if (!useBotStore.getState().isRunning) return;

  const { snipeAmount } = useBotStore.getState();
  const logMessage = `üéØ –°–Ω–∞–π–ø–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ ${tokenSymbol}: ${snipeAmount.toFixed(2)} SOL`;
  useBotStore.getState().addLog(logMessage);

  // –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏
  setTimeout(() => {
    // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 80% —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
    if (Math.random() < 0.8) {
      const successMessage = `‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ ${tokenSymbol} –∑–∞ ${snipeAmount.toFixed(2)} SOL`;
      useBotStore.getState().addLog(successMessage);
    } else {
      const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ ${tokenSymbol}: –Ω–µ—Ö–≤–∞—Ç–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏`;
      useBotStore.getState().addLog(errorMessage);
    }
  }, 1500);
};