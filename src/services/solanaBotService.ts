import { Connection, Keypair, PublicKey, LAMPORTS_PER_SOL, SystemProgram, Transaction } from '@solana/web3.js';
import { create } from 'zustand';
import { DEVNET_RPC, DEFAULT_KEY } from '@/lib/constants';
import { getConnection, getKeypairFromPrivateKey } from './solanaConnectionService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
interface BotState {
  balance: number;
  isRunning: boolean;
  network: string;
  privateKey: string;
  publicKey: string;
  snipeAmount: number;
  maxGas: number;
  swapTime: number;
  logs: string[];
  setPrivateKey: (key: string) => void;
  setSnipeAmount: (amount: number) => void;
  setMaxGas: (gas: number) => void;
  setSwapTime: (time: number) => void;
  addLog: (log: string) => void;
}

// –°–æ–∑–¥–∞–µ–º Zustand store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞
export const useBotStore = create<BotState>((set) => ({
  balance: 0,
  isRunning: false,
  network: 'devnet',
  privateKey: '',
  publicKey: '',
  snipeAmount: 0.1,
  maxGas: 0.005,
  swapTime: 10,
  logs: [],
  setPrivateKey: (key) => set({ privateKey: key }),
  setSnipeAmount: (amount) => set({ snipeAmount: amount }),
  setMaxGas: (gas) => set({ maxGas: gas }),
  setSwapTime: (time) => set({ swapTime: time }),
  addLog: (log) => set((state) => ({
    logs: [log, ...state.logs].slice(0, 50)
  }))
}));

// –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
const parsePrivateKey = (key: string): number[] | null => {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  const cleanKey = key.replace(/\s+/g, '');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª [123,456,...]
  if (cleanKey.startsWith('[') && cleanKey.endsWith(']')) {
    try {
      return JSON.parse(cleanKey);
    } catch {
      // –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
      try {
        // –£–¥–∞–ª—è–µ–º —Å–∫–æ–±–∫–∏ –∏ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É —Å —á–∏—Å–ª–∞–º–∏
        return cleanKey.slice(1, -1).split(',').map(num => parseInt(num.trim(), 10));
      } catch {
        return null;
      }
    }
  }

  // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  if (cleanKey.includes(',')) {
    try {
      return cleanKey.split(',').map(num => parseInt(num.trim(), 10));
    } catch {
      return null;
    }
  }

  // –ï—Å–ª–∏ —ç—Ç–æ base58 –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
  try {
    const decoded = Uint8Array.from(Buffer.from(cleanKey, 'base64'));
    return Array.from(decoded);
  } catch {
    return null;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
export const updateBalance = async (): Promise<number> => {
  console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...");

  try {
    const { privateKey } = useBotStore.getState();

    console.log("Updating balance with private key:", privateKey ? "Present" : "Not present");

    if (!privateKey) {
      console.log("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      useBotStore.setState({ balance: 0, publicKey: '' });
      return 0;
    }

    const keypair = getKeypairFromPrivateKey(privateKey);

    if (!keypair) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å keypair –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞");
      useBotStore.setState({ balance: 0 });
      return 0;
    }

    console.log("Wallet public key:", keypair.publicKey.toString());

    const connection = getConnection();
    const lamports = await connection.getBalance(keypair.publicKey);
    console.log("Raw balance:", lamports);

    const publicKey = keypair.publicKey.toString();

    useBotStore.setState({ 
      balance: lamports / LAMPORTS_PER_SOL,
      publicKey 
    });

    return lamports / LAMPORTS_PER_SOL;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    useBotStore.setState({ balance: 0 });
    return 0;
  }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const formatBalanceDisplay = (balance: number): string => {
  return `${balance.toFixed(4)} SOL`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä—É–±–ª—è—Ö
export const formatRubDisplay = (balance: number): string => {
  const solPriceInRub = 7200; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å SOL –≤ —Ä—É–±–ª—è—Ö
  const rubValue = balance * solPriceInRub;
  return `‚âà ${rubValue.toFixed(0)} ‚ÇΩ`;
};

// –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
export const startCopyBot = async (): Promise<void> => {
  try {
    const { privateKey, snipeAmount, maxGas, swapTime } = useBotStore.getState();

    if (!privateKey) {
      useBotStore.getState().addLog("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await updateBalance();

    useBotStore.setState({ isRunning: true });
    useBotStore.getState().addLog("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");

    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
    startMockBotActivity();

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", error);
    useBotStore.getState().addLog(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: ${error}`);
    useBotStore.setState({ isRunning: false });
  }
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
export const stopCopyBot = (): void => {
  useBotStore.setState({ isRunning: false });
  useBotStore.getState().addLog("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
  stopMockBotActivity();
};

// –ü—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
let mockInterval: number | null = null;
let mockTransactionInterval: number | null = null;

// –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const startMockBotActivity = () => {
  if (mockInterval) clearInterval(mockInterval);
  if (mockTransactionInterval) clearInterval(mockTransactionInterval);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
  mockInterval = window.setInterval(() => {
    const { isRunning, snipeAmount } = useBotStore.getState();

    if (!isRunning) return;

    // –°–ª—É—á–∞–π–Ω–∞—è —Å—É–º–º–∞ SOL –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    const amount = (Math.random() * snipeAmount).toFixed(4);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞
    const randomTokenAddress = Array.from({ length: 10 }, () => 
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"[
        Math.floor(Math.random() * 62)
      ]
    ).join('');

    useBotStore.getState().addLog(`üí∞ –°–Ω–∞–π–ø–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É ${amount} SOL`);
    useBotStore.getState().addLog(`üîç –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: ${randomTokenAddress}...`);

  }, 5000);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  mockTransactionInterval = window.setInterval(() => {
    const { isRunning } = useBotStore.getState();

    if (!isRunning) return;

    // –°–ª—É—á–∞–π–Ω—ã–π —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const randomTxHash = Array.from({ length: 10 }, () => 
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"[
        Math.floor(Math.random() * 62)
      ]
    ).join('');

    // –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const { balance } = useBotStore.getState();
    useBotStore.setState({ 
      balance: Math.max(0, balance - 0.000005) 
    });

    useBotStore.getState().addLog(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${randomTxHash}...`);

  }, 8000);
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
const stopMockBotActivity = () => {
  if (mockInterval) {
    clearInterval(mockInterval);
    mockInterval = null;
  }

  if (mockTransactionInterval) {
    clearInterval(mockTransactionInterval);
    mockTransactionInterval = null;
  }
};