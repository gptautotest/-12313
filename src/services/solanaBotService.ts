import { Connection, Keypair, PublicKey, LAMPORTS_PER_SOL, SystemProgram, Transaction } from '@solana/web3.js';
import { useBotStore } from '../stores/botStore';
import bs58 from 'bs58';
import { DEVNET_RPC } from '../lib/constants';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–æ–º

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º
export const getConnection = (network = 'devnet') => {
  const rpcUrl = network === 'devnet' ? DEVNET_RPC : process.env.MAINNET_RPC || '';
  return new Connection(rpcUrl);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
export const getKeypairFromPrivateKey = (privateKeyString: string): Keypair | null => {
  if (!privateKeyString) {
    console.log("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    return null;
  }

  try {
    const secretKey = bs58.decode(privateKeyString.trim());
    return Keypair.fromSecretKey(secretKey);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä—ã:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export const startCopyBot = async () => {
  console.log("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...");

  const store = useBotStore.getState();

  if (!store.privateKey) {
    console.error("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.");
    addLog("üõë –û—à–∏–±–∫–∞: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    return;
  }

  useBotStore.setState({ isRunning: true });

  // –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
  addLog("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...");

  // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ WebSocket —Å–æ–±—ã—Ç–∏—è –±–ª–æ–∫—á–µ–π–Ω–∞
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–¥–∏–º –∏–º–∏—Ç–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã:
  startWebsocketConnection();
};

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
export const stopCopyBot = () => {
  console.log("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...");

  useBotStore.setState({ isRunning: false });

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
  stopWebsocketConnection();

  addLog("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
};

// –ò–º–∏—Ç–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
let wsInterval: ReturnType<typeof setInterval> | null = null;

const startWebsocketConnection = () => {
  console.log("WebSocket connected");

  wsInterval = setInterval(() => {
    if (Math.random() > 0.7) {
      const tokenAddress = generateRandomHexString(11);
      const amount = (Math.random() * 0.5).toFixed(4);

      addLog(`üîç –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω: ${tokenAddress}...`);
      addLog(`üí∞ –°–Ω–∞–π–ø–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É ${amount} SOL`);

      if (Math.random() > 0.3) {
        const txId = generateRandomHexString(10);
        addLog(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${txId}...`);
      } else {
        addLog(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...`);
      }
    }
  }, 15000);
};

const stopWebsocketConnection = () => {
  if (wsInterval) {
    clearInterval(wsInterval);
    wsInterval = null;
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const generateRandomHexString = (length: number): string => {
  const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
  let result = '';
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
};

// –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const addLog = (message: string) => {
  useBotStore.setState(state => ({
    logs: [...state.logs, message]
  }));
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
export const updateBalance = async () => {
  console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...");

  const { privateKey, network } = useBotStore.getState();

  if (!privateKey) {
    console.log("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    useBotStore.setState({ balance: 0 });
    return 0;
  }

  console.log("Updating balance with private key:", privateKey ? "Present" : "Not present");

  try {
    const keypair = getKeypairFromPrivateKey(privateKey);

    if (!keypair) {
      useBotStore.setState({ balance: 0 });
      return 0;
    }

    const connection = getConnection(network);
    const publicKey = keypair.publicKey;

    console.log("Wallet public key:", publicKey.toString());

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
    const lamports = await connection.getBalance(publicKey);
    console.log("Raw balance:", lamports);

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    useBotStore.setState({
      balance: lamports / LAMPORTS_PER_SOL,
      publicKey: publicKey.toString()
    });

    return lamports / LAMPORTS_PER_SOL;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    useBotStore.setState({ balance: 0 });
    return 0;
  }
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
export const formatBalanceDisplay = (balance: number): string => {
  return `${balance.toFixed(4)} SOL`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä—É–±–ª—è—Ö
export const formatRubDisplay = (balance: number): string => {
  // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∫—É—Ä—Å –ø—Ä–∏–º–µ—Ä–Ω–æ 180$ –∑–∞ SOL –∏ 92 —Ä—É–±–ª—è –∑–∞ –¥–æ–ª–ª–∞—Ä
  const solToUsd = 180;
  const usdToRub = 92;
  const rubValue = balance * solToUsd * usdToRub;

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á
  return `‚âà ${rubValue.toLocaleString('ru-RU', {
    maximumFractionDigits: 0
  })} ‚ÇΩ`;
};